<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Particle Filter Simulation</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      margin: 0;
      display: flex;
      flex-direction: row;
      height: 100vh;
      background: #f4f7fa;
    }

#leftPane {
  display: flex;
  flex-direction: column;
  flex: 2;
  padding: 20px;
}

#simulation {
  flex: none;
  background: linear-gradient(to bottom, #f3f4f6, #e5e7eb);
  border-radius: 10px;
}
    
#results {
  margin-top: 20px;
  background: #ffffff;
  padding: 15px;
  border-radius: 10px;
  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.05);
}

    #controls {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background: #ffffff;
      box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.05);
      border-radius: 0 10px 10px 0;
    }
       
    h3 {
      border-bottom: 1px solid #ddd;
      padding-bottom: 4px;
      margin-top: 20px;
      color: #333;
    }
    .filterControl {
      margin-bottom: 15px;
    }
    button {
      padding: 10px 14px;
      margin-right: 8px;
      margin-top: 10px;
      background-color: #2563eb;
      color: white;
      font-weight: 600;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }
    button:hover {
      background-color: #1e40af;
    }
    select {
      padding: 6px;
      border-radius: 6px;
      border: 1px solid #ccc;
      margin-left: 8px;
    }
#simFooter {
  display: flex;
  flex-direction: row;
  gap: 20px;
  margin-top: 20px;
}

#outcomeMetrics, #integrityScore {
  flex: 1;
}

    canvas {
      display: block;
      border-radius: 0 0 0 10px;
    }
    .metrics {
      font-size: 0.9em;
      background: #f0f0f0;
      padding: 10px;
      border-radius: 6px;
    }
    #integrityScore {
      font-size: 1.2em;
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div id="leftPane">
  <div id="simulation">
    <canvas id="simCanvas" width="800" height="400"></canvas>
  </div>
  <div id="simFooter">
    <div id="outcomeMetrics">
      <h3>Applicant Outcomes</h3>
      <canvas id="barGraph" width="300" height="200" style="background: #fff; border: 1px solid #ccc; border-radius: 6px;"></canvas>
    </div>
    <div id="integritySection">
      <h3>Integrity Score</h3>
      <div id="integrityScore"></div>
    </div>
  </div>
</div>

  <div id="controls">
    <h3> Income Assistance Eligibility Simulator</h3>
     <p> This model simulates eligibility screening processes, allowing us to review the impact of varying configurations of screening approaches.</p>
     <p> You can add checkpoints and modify the level of scrutiny at each checkpoint.  Be careful though - increased scrutiny comes at a cost! Looking closer means you take longer. If you get backlogged, nobody gets through.</p>
     <p> The integrity score rates how well the configuration works - the goal is to approve as many eligible applicants as possible, and to deny as many ineligible applicants as possible. The Applicant outcomes bar graph shows a more detailed breakdown of your results - the red portions represents those applicants were denied, and the green portion represents applicants who were approved.</p>
    <h3>Checkpoint Controls</h3>
     <p> Add or remove checkpoints in the application process, and modify the level of scrutiny at each point.</p>
    <div id="filterControls"></div>
    <button onclick="addFilter()">Add Checkpoint</button>
    <button onclick="removeFilter()">Remove Checkpoint</button>
    <button onclick="resetSim()">Reset</button>
<button id="speedBtn" onclick="toggleSpeed()">Speed: 1x</button>


    <h3>Metrics</h3>
    <div class="metrics" id="metricsPane"></div>
<h3>Simulation History</h3>
<div id="historyPane" class="metrics"></div>
     </div>
  <script>
    const canvas = document.getElementById('simCanvas');
    const ctx = canvas.getContext('2d');
    const MAX_PARTICLES = 750;
const SIZE_COUNTS = [550, 50, 50, 50, 50]; // Fixed distribution of sizes
const SIZES_TO_SPAWN = [];
const CLOGGING_WEIGHTS = [1, 2, 3, 6, 10];  // Heavier particles clog more


// Fill spawn list based on target counts
for (let size = 0; size < SIZE_COUNTS.length; size++) {
  for (let i = 0; i < SIZE_COUNTS[size]; i++) {
    SIZES_TO_SPAWN.push(size);
  }
}

// Optional: shuffle to randomize spawn order
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}
shuffle(SIZES_TO_SPAWN);


    const COLORS = ['#FFD700', '#FFA500', '#FF4500', '#1E90FF', '#DC143C'];
    const FILTER_COLORS = ['#34D399', '#FACC15', '#FB923C', '#EF4444'];
    const passChances = [
      [0.99, 0.99, 0.98, 0.97],
      [0.99, 0.9, 0.85, 0.1],
      [0.9, 0.85, 0.10, 0.02],
      [0.8, 0.1, 0.05, 0.01],
      [0.08, 0.05, 0.01, 0.005]
    ];
 const capacities = [100, 25, 20, 10];  // Maximum number of blocked particles each filter can handle before clogging
const particleRate = 15;  // Number of particles processed in a time step or cycle

    let filters = [2];
    let particles = [];
    let lastSpawn = 0;
    let filterStates = [];
    let running = true;
    let totalSpawned = 0;
let history = [];
let blockedParticlesPerFilter = new Array(filters.length).fill(0);
let currentRunId = null;
let timeScale = 1;
function toggleSpeed() {
  timeScale = timeScale === 1 ? 5 : 1;
  document.getElementById('speedBtn').innerText = `Speed: ${timeScale}x`;
}


    function addFilter() {
      if (filters.length < 4) {
        filters.push(2);
        resetFilterStates();
        renderFilterControls();
      }
    }

    function removeFilter() {
      if (filters.length > 1) {
        filters.pop();
        resetFilterStates();
        renderFilterControls();
      }
    }

    // Simulate the particle processing and clogging logic
function processParticles(particles) {
  particles.forEach((particle, index) => {
    const filterIndex = getFilterIndexForParticle(particle);  // Get the relevant filter for the particle

    if (particle.stuck) {
      // If the particle is stuck (blocked), increase the blocked count for the corresponding filter
      blockedParticlesPerFilter[filterIndex]++;
    }

    // Check if the filter has exceeded its capacity and clog it if necessary
    if (blockedParticlesPerFilter[filterIndex] >= capacities[filterIndex]) {
      // Mark the filter as clogged (we can set a `clogged` property or just track the state)
      filters[filterIndex].clogged = true;
    }
  });
}

// Helper function to determine which filter a particle is interacting with (you should have your own logic for this)
function getFilterIndexForParticle(particle) {
  // This is a placeholder. Youâ€™ll need to determine how to map each particle to the correct filter.
  return Math.floor(particle.size / 2);  // Example: You can define this logic based on particle size or other factors
}

// To check if any filters are clogged:
function checkCloggedFilters() {
  filters.forEach((filter, index) => {
    if (filter.clogged) {
      console.log(`Filter ${index} is clogged after blocking ${blockedParticlesPerFilter[index]} particles.`);
    }
  });
}

// Reset the state at the start of each simulation or cycle
function resetCloggingState() {
  blockedParticlesPerFilter = new Array(filters.length).fill(0);  // Reset blocked particle counts
  filters.forEach(filter => {
    filter.clogged = false;  // Reset clogging state for each filter
  });
}
function resetSim() {
  particles = [];
  totalSpawned = 0;
  running = false;
  currentRunId = Math.random();  // <---- new unique ID per run
  resetFilterStates();
  document.getElementById('metricsPane').innerText = '';
  document.getElementById('integrityScore').innerText = '';
 startSim(); // auto-restart
}



    function startSim() {
      running = true;
    }

    function pauseSim() {
      running = false;
    }

    function resetFilterStates() {
      filterStates = filters.map(() => ({ count: 0, lastTime: Date.now(), clogged: false, clogStart: 0 }));
    }

    function renderFilterControls() {
      const container = document.getElementById('filterControls');
      container.innerHTML = '';
      filters.forEach((filter, idx) => {
        const div = document.createElement('div');
        div.className = 'filterControl';
        div.innerHTML = `Checkpoint ${idx + 1}: 
          <select onchange="changeFilter(${idx}, this.value)">
            <option value="1" ${filter === 1 ? 'selected' : ''}>Low Scrutiny</option>
            <option value="2" ${filter === 2 ? 'selected' : ''}>Moderate Scrutiny</option>
            <option value="3" ${filter === 3 ? 'selected' : ''}>High Scrutiny</option>
            <option value="4" ${filter === 4 ? 'selected' : ''}>Intensive Scrutiny</option>
          </select>`;
        container.appendChild(div);
      });
    }

    function changeFilter(idx, value) {
      filters[idx] = parseInt(value);
      resetFilterStates();
    }

    function spawnParticle() {
  if (totalSpawned >= SIZES_TO_SPAWN.length) return;

  const size = SIZES_TO_SPAWN[totalSpawned];
  particles.push({
    id: Math.random(),
    size,
    color: COLORS[size],
    x: 0,
    y: Math.random() * canvas.height,
    stuck: false,
    stoppedByClog: false,
    passed: []
  });

  totalSpawned++;
}



    function updateParticles() {
      const now = Date.now();
      filterStates.forEach((state, i) => {
        const cap = capacities[filters[i] - 1];
        if (now - state.lastTime > (1000 / timeScale)) {
    state.count = 0;
    state.lastTime = now;
}

        if (state.clogged && now - state.clogStart > (5000 / timeScale)) {
    state.clogged = false;
}

  // Stop simulation if all particles are done
  if (totalSpawned >= MAX_PARTICLES) {
    const active = particles.some(p => !p.stuck && p.passed.length < filters.length);
    if (!active) running = false;
  }

      });

      const spacing = canvas.width / (filters.length + 1);
      for (let p of particles) {
        if (p.stuck) continue;
        p.x += 1 * timeScale;
        for (let i = 0; i < filters.length; i++) {
          const fx = (i + 1) * spacing;
          const fSize = filters[i];
          const fState = filterStates[i];

          if (p.x >= fx && !p.passed.includes(i)) {
            const overCap = fState.count >= capacities[fSize - 1];
            if (overCap && !fState.clogged) {
              fState.clogged = true;
              fState.clogStart = now;
            }
            const mod = fState.clogged ? 0.5 : 1;
            const chance = passChances[p.size][fSize - 1] * mod;
            if (Math.random() <= chance) {
  p.passed.push(i);
  fState.count += CLOGGING_WEIGHTS[p.size];  // Use weighted clogging
} else {
  p.stuck = true;
  p.stoppedByClog = fState.clogged;
  fState.count += CLOGGING_WEIGHTS[p.size];  // Still add clogging weight on block
}

            break;
          }
        }
      }
    }

    function drawParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const spacing = canvas.width / (filters.length + 1);
      filters.forEach((fSize, i) => {
        const x = (i + 1) * spacing;
        ctx.fillStyle = filterStates[i].clogged ? '#9ca3af' : FILTER_COLORS[fSize - 1];
        ctx.fillRect(x - 1.5, 0, 3, canvas.height);
      });

      for (let p of particles) {
        ctx.beginPath();
       ctx.fillStyle = p.stuck
  ? (p.stoppedByClog ? '#6b7280' : p.color)
  : p.color;

        const radius = 4 + p.size * 2;
        ctx.globalAlpha = p.stuck ? 0.4 : 1;
        ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.globalAlpha = 1;
      }
    }
function updateHistoryDisplay() {
  const container = document.getElementById('historyPane');
  if (!container) return;

  container.innerHTML = history.map((entry, i) => `
    <div><strong>Run ${i + 1}:</strong> ${entry.config} â€” <span style="color:${entry.color}">${entry.score}%</span></div>
  `).join('');
}

function getFilterLabel(index) {
  return ['Low Scrutiny', 'Moderate Scrutiny', 'High Scrutiny', 'Intesntive Scrutiny'][index - 1];
}

function getFilterConfigLabel(filters) {
  return filters.map(getFilterLabel).join(' > ');
}

    function updateMetrics() {
  const total = particles.length;
  const passed = particles.filter(p => !p.stuck && p.passed.length === filters.length).length;
  const blocked = particles.filter(p => p.stuck).length;
  const clogged = particles.filter(p => p.stuck && p.stoppedByClog).length;

  const colorCount = [0, 0, 0, 0, 0];
  const passedCount = [0, 0, 0, 0, 0];
  particles.forEach(p => {
    colorCount[p.size]++;
    if (!p.stuck && p.passed.length === filters.length) passedCount[p.size]++;
  });

// Count tiny and non-tiny particles
const totalTiny = colorCount[0] || 1;  // assuming colorCount[0] gives the number of tiny particles
const passedTiny = passedCount[0];     // assuming passedCount[0] gives the number of tiny particles that passed
const totalOther = colorCount.slice(1).reduce((a, b) => a + b, 0) || 1;
const passedOther = passedCount.slice(1).reduce((a, b) => a + b, 0);

// Calculate the tiny particle score: higher is better
const tinyScore = passedTiny / totalTiny;

// Calculate the non-tiny blocking score: higher is better (but secondary to tiny particles)
const blockingScore = 1 - (passedOther / totalOther);

// Count how many tiny particles were blocked by clogs
const tinyClogged = particles.filter(p => p.size === 0 && p.stuck && p.stoppedByClog).length;

// Calculate the penalty for blocking tiny particles due to clogs: higher is worse
const tinyParticlePenalty = (tinyClogged / totalTiny) * 2; // Penalize more for tiny blockages

// Adjust tiny score with the penalty for blocked tiny particles
const adjustedTinyScore = Math.max(0, tinyScore - tinyParticlePenalty);

// Penalty for redundant filters blocking tiny particles: higher is worse
// A higher penalty will be added if redundant filters are blocking tiny particles
const redundantFilterPenalty = (tinyClogged / totalTiny) * 1.5; // You can adjust this factor based on the severity of redundant filters

// Adjust tiny score again for redundant filtering (apply a penalty)
const finalTinyScore = Math.max(0, adjustedTinyScore - redundantFilterPenalty);

// Calculate final integrity: 75% tiny score, 25% blocking score (with the penalty)
const integrity = Math.max(0, Math.round(100 * (finalTinyScore * 0.50 + blockingScore * 0.50)));

// Set the integrity score
const scoreEl = document.getElementById('integrityScore');
scoreEl.innerText = integrity + '%';



// Set the color of the score based on the integrity
let color = '#ef4444';  // red (poor score)
if (integrity >= 79) color = '#10b981';  // green (good score)
else if (integrity >= 50) color = '#f59e0b';  // yellow (okay score)
scoreEl.style.color = color;


  document.getElementById('metricsPane').innerText = `
    Total Applicants: ${total}
    All Approved: ${passed}
    All Denied: ${blocked}
    Abandoned due to Backlog: ${clogged}`;

    }
function drawBarGraph() {
  const canvas = document.getElementById('barGraph');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Bar parameters
  const barHeight = 50;
  const spacing = 40;

  // Grouping
  const eligibleParticles = particles.filter(p => p.size === 0);
  const ineligibleParticles = particles.filter(p => p.size > 0);

  const groups = [
    { label: 'Eligible', particles: eligibleParticles },
    { label: 'Ineligible', particles: ineligibleParticles }
  ];

  const maxBarWidth = canvas.width * 0.8; // 80% of canvas width
  const startX = canvas.width * 0.1;      // Left margin

  for (let i = 0; i < groups.length; i++) {
    const { label, particles } = groups[i];
    const total = particles.length;
    const passed = particles.filter(p => !p.stuck && p.passed.length === filters.length).length;
    const blocked = total - passed;

    const passPct = total > 0 ? passed / total : 0;
    const blockPct = 1 - passPct;

    const y = i * (barHeight + spacing) + spacing;

    // Draw red blocked segment (left side)
    const redWidth = blockPct * maxBarWidth;
    ctx.fillStyle = '#ef4444';
    ctx.fillRect(startX, y, redWidth, barHeight);

    // Draw green passed segment (right side)
    const greenWidth = passPct * maxBarWidth;
    ctx.fillStyle = '#10b981';
    ctx.fillRect(startX + redWidth, y, greenWidth, barHeight);

    // Label
    ctx.fillStyle = '#374151';
    ctx.font = '14px Inter';
    ctx.textAlign = 'left';
    ctx.fillText(label, 10, y + barHeight / 2 + 5);
  }

  // Optional: Add legend, axis ticks, or percentage labels if needed
}

function checkForCompletion() {
  if (
    typeof currentRunId !== 'undefined' &&
    !running &&
    totalSpawned >= MAX_PARTICLES &&
    !history.some(h => h.id === currentRunId)
  ) {
    const configLabel = getFilterConfigLabel(filters);
    const integrity = parseInt(document.getElementById('integrityScore').innerText);
    const color = document.getElementById('integrityScore').style.color;

    history.push({
      id: currentRunId,
      config: configLabel,
      score: integrity,
      color
    });
    updateHistoryDisplay();
  }
}


    function tick() {
  const now = Date.now();
  const spawnInterval = 100 / timeScale; // Reduce the interval for faster spawning
  if (running && now - lastSpawn > spawnInterval) {
    spawnParticle();
    lastSpawn = now;
  }
  updateParticles();
  drawParticles();
  updateMetrics();
  drawBarGraph();
  checkForCompletion();
  requestAnimationFrame(tick);
}


    renderFilterControls();
    resetFilterStates();
    tick();
  </script>
</body>
</html>